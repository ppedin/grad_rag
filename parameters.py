from pydantic import BaseModel
from typing import List, Union


base_prompt_hyperparameters_graph = """
Your goal is to define the hyperparameters for a Graph RAG architecture. 
You have to define a good chunk size. The unstructured text will be splitted into chunks of chunk size. 
Each chunk will then be fed to a LLM, which will extract a graph out of it (a set of triplets and relations). 

Please, suggest an appropriate chunk size. 
Use the following critique: 
{}

Provide the reasoning that led to your response. 
"""


class HyperparametersGraphResponse(BaseModel):
    reasoning: str
    chunk_size: int


base_prompt_graph_builder = """
You will be given a text. Your goal is to identify entities in the text and all the relationships among the identified entities. 
For each entity and relationship, you will include its type in the response. 
The relationships must be among the extracted entities. For each relationship, include a description (why you think the two entities are related to each other), and the evidence from the text that supports this. 
Provide a list of triplets in your answer. 

Text:
{}

Use the following critique: 
{}

Provide the reasoning that led to your response. 
"""


class Entity(BaseModel):
    name: str
    type: str


class Relationship(BaseModel):
    source_entity: str
    target_entity: str
    relationship_type: str
    description: str
    evidence: str


class Triplet(BaseModel):
    subject: str
    predicate: str
    object: str


class GraphBuilderResponse(BaseModel):
    entities: List[Entity]
    relationships: List[Relationship]
    triplets: List[Triplet]
    reasoning: str


base_prompt_graph_retrieval_planner = """
Your goal is to decide the next step of a strategy to explore a graph in order to retrieve relevant information to answer the following query: {}.

A high-level description of the graph is the following: {}

You must choose one of the following functions:

- search_nodes_by_keyword(keyword): search for all the nodes whose labels contain the given keyword
- search_nodes_by_types(node_type): search for all the nodes whose type property contains the given type
- get_neighbors(node_name): get all neighbors of a node with the given name
- search_relations_by_type(relation_type): search for all the triplets whose relationship matches the type
- identify_communities(node_name): find the community (connected component) containing a specific node
- analyze_path(start_node_name, end_node_name): find the shortest path between two nodes
- find_hub_nodes: find the top 3 hub nodes with the highest connectivity

The subgraphs you retrieved so far are the following:

{}

Choose one of the functions and specify the arguments.

Use the following critique:
{}

Provide the reasoning that led to your response.
"""


# Graph Retrieval Planner Function Call Models
class SearchNodesByKeywordCall(BaseModel):
    function_name: str = "search_nodes_by_keyword"
    keyword: str


class SearchNodesByTypesCall(BaseModel):
    function_name: str = "search_nodes_by_types"
    node_type: str


class GetNeighborsCall(BaseModel):
    function_name: str = "get_neighbors"
    node_name: str


class SearchRelationsByTypeCall(BaseModel):
    function_name: str = "search_relations_by_type"
    relation_type: str


class IdentifyCommunitiesCall(BaseModel):
    function_name: str = "identify_communities"
    node_name: str


class AnalyzePathCall(BaseModel):
    function_name: str = "analyze_path"
    start_node_name: str
    end_node_name: str


class FindHubNodesCall(BaseModel):
    function_name: str = "find_hub_nodes"
    # No additional arguments needed


# Union type for all possible function calls
FunctionCall = Union[
    SearchNodesByKeywordCall,
    SearchNodesByTypesCall,
    GetNeighborsCall,
    SearchRelationsByTypeCall,
    IdentifyCommunitiesCall,
    AnalyzePathCall,
    FindHubNodesCall
]


class GraphRetrievalPlannerResponse(BaseModel):
    function_call: FunctionCall
    reasoning: str


base_prompt_answer_generator_graph = """
You will be given a query and the information retrieved from a graph. 
Your goal is to use the retrieved context to answer the query. 

This is the query:
{}

This is the information: 
{}

Provide an answer to the query. 

Use the following critique: 
{}
"""


response_evaluator_prompt = """
You are evaluating the response generated by a RAG system. 

The query was:
{}

The response was:
{}

The gold response is:
{}

The ROUGE score between the response and the gold response is:
{}

Provide a detailed explanation of how the response can be improved. 
"""


generation_prompt_gradient_prompt = """
You are evaluating the prompt used for answer generation in a RAG system. 

Here are some examples of prompts and answers, with feedback of how the response can be improved:
{}

Provide a detailed critique that will be added to the prompt to improve it. 
"""


retrieved_content_gradient_prompt_graph = """
You are evaluating the content retrieved by a GraphRAG system. 


Here are some examples of retrieved contexts, queries, and answers, with feedback of how the response can be improved. 
{}


Provide a detailed critique of how the retrieved content can be improved. 
"""


retrieval_plan_gradient_prompt_graph = """
You are evaluating the retrieval plan made by an agentic GraphRAG system. 

Here are some examples of retrieval plans, with the retrieved contents:
{}

The critique on the retrieved content was:
{}

Provide a detailed critique of how the retrieval plan can be improved. 
"""


retrieval_planning_prompt_gradient_prompt = """
You are evaluating the prompt used for retrieval planning in an agentic GraphRAG system. 

These are the retrieval planning prompt and a high-level description of the graph, with the retrieval plans generated:
{}

The critique on the retrieval plans was:
{}

Provide a detailed critique that will be added to the retrieval planning prompt to improve it. 
"""


graph_gradient_prompt = """
You are evaluating a graph that has been automatically built for a GraphRAG system. 

Here are the queries, the graph and the retrieval plans generated by the agent. 
{}

The critique on the retrieval plans was:
{}

Provide a detailed critique of how the graph can be improved. 
"""


graph_extraction_prompt_gradient_prompt = """
You are evaluating the prompt used for graph construction in an agentic GraphRAG system. 

The prompt was the following:
{}

A sample from the corpus used to build the graph is the following:
{}

A high-level description of the obtained graph was the following:
{}

The critique on the graph was: 
{}

Provide a detailed critique that will be added to the graph construction prompt to improve it. 
"""


rag_hyperparameters_agent_gradient_prompt = """
You are evaluating the choice of the chunk size for a GraphRAG system. The unstructured text will be splitted into chunks of chunk size.
Each chunk will then be fed to a LLM, which will extract a graph out of it (a set of triplets and relation). 

The chosen chunk size is the following:
{}

A sample from the corpus used to build the graph is the following:
{}

A high-level description of the obtained graph was the following:
{}

The critique on the graph was:
{}

Provide a detailed critique of how the chunk size can be improved. 
"""